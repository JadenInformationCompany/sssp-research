<?xml version="1.0"?>

<!-- 从高到地低 OFF 、 FATAL 、 ERROR 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时会输出 -->
<!-- 以下每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- 看是console还是file主要是看ConsoleAppender和RollingFileAppender -->

<!-- 属性描述 scan：性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true -->
<!-- 当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- 属性描述 scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。 -->
<!-- 属性描述 debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="false" scanPeriod="60" debug="false">
	<!-- 定义日志文件 输入位置，这个是全局变量，方便调用重复 -->
	<!-- 使用/是绝对路径，没有就是使用相对路径 -->
	<property name="log_dir" value="/logback" />
	<!-- 日志最大的历史 30天 ，这个是全局变量，方便调用重复 -->
	<property name="maxHistory" value="30" />

	<!-- 配置控制台日志输出 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<!-- 对日志进行格式化 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n
			</pattern>
		</encoder>
	</appender>

	<!-- 配置文件日志输出，所有级别都输出 -->
	<appender name="file"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 设置文件位置 -->
			<FileNamePattern>${log_dir}/allLevel/clever-log-%d{yyyy-MM-dd_HH}.log
			</FileNamePattern>
			<!-- 设置文件存活时间 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n
			</pattern>
		</encoder>
	</appender>

	<!-- ERROR级别日志 -->
	<!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
	<appender name="error"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<!-- 过滤器，只记录WARN级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!--日志输出位置 可相对、和绝对路径 -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/error-log.log
			</fileNamePattern>
			<!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6， 则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n
			</pattern>
		</encoder>
	</appender>

	<!-- WARN级别日志 appender -->
	<appender name="warn"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<!-- 过滤器，只记录WARN级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/warn-log.log
			</fileNamePattern>
			<!-- 日志最大的历史 60天 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n
			</pattern>
		</encoder>
	</appender>

	<!-- INFO级别日志 appender -->
	<appender name="info"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<!-- 过滤器，只记录INFO级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/info-log.log
			</fileNamePattern>
			<!-- 日志最大的历史 60天 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n
			</pattern>
		</encoder>
	</appender>

	<!-- DEBUG级别日志 appender -->
	<appender name="debug"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<!-- 过滤器，只记录DEBUG级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>DEBUG</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/debug-log.log
			</fileNamePattern>
			<!-- 日志最大的历史 60天 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n
			</pattern>
		</encoder>
	</appender>

	<!-- TRACE级别日志 appender -->
	<appender name="trace"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<Encoding>UTF-8</Encoding>
		<!-- 过滤器，只记录ERROR级别的日志 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>TRACE</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 按天回滚 daily -->
			<fileNamePattern>${log_dir}/%d{yyyy-MM-dd}/trace-log.log
			</fileNamePattern>
			<!-- 日志最大的历史 60天 -->
			<maxHistory>${maxHistory}</maxHistory>
		</rollingPolicy>
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger -%msg%n
			</pattern>
		</encoder>
	</appender>

	<!-- name:用来指定受此loger约束的某一个包或者具体的某一个类 -->
	<!-- addtivity:是否向上级loger传递打印信息。默认是true。 -->
	<!-- level:用来设置打印级别，大小写无关 -->
	<!-- appender-ref:标识使用哪个appender将会添加到这个loger -->
	<!-- 精确设置每个包下面的日志 -->
	<logger name="com.szhis.frsoft" additivity="false">
		<!-- 指定最低日志级别 -->
		<level value="info" />
		<appender-ref ref="console" />
		<appender-ref ref="file" />
	</logger>
	<logger name="java.sql.PreparedStatement" additivity="false">
		<level value="debug"></level>
		<appender-ref ref="console" />
		<appender-ref ref="debug" />
	</logger>
	<logger name="java.sql" additivity="false">
		<level value="info"></level>
		<appender-ref ref="console" />
		<appender-ref ref="info" />
	</logger>
	<logger name="org.springframework" additivity="false">
		<level value="info"></level>
		<appender-ref ref="console" />
		<appender-ref ref="info" />
	</logger>

	<!-- root也是<loger>元素，但是它是根loger,只有一个level属性，应为已经被命名为"root" -->
	<!-- 这里是默认配置，没有配置就使用默认配置 -->
	<root level="info">
		<!-- 控制台输出 -->
		<appender-ref ref="console" />
		<!-- 文件输出 -->
		<appender-ref ref="info" />
	</root>

</configuration>